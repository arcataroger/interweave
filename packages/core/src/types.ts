/* eslint-disable @typescript-eslint/no-explicit-any */

import React from 'react';
import type { Matcher } from './createMatcher';
import type { Transformer } from './createTransformer';

declare global {
	// eslint-disable-next-line no-var, vars-on-top
	var INTERWEAVE_SSR_POLYFILL: (() => Document | undefined) | undefined;
}

export interface CommonInternals<Props, Options = {}> {
	onAfterParse?: OnAfterParse<Props>;
	onBeforeParse?: OnBeforeParse<Props>;
	options: Partial<Options>;
}

// ELEMENTS

export type TagName = keyof React.ReactHTML | 'rb' | 'rtc';

export type WildTagName = TagName | '*';

export interface TagConfig {
	// Only children
	children: TagName[];
	// Children content type
	content: number;
	// Invalid children
	invalid: TagName[];
	// Only parent
	parent: TagName[];
	// Can render self as a child
	self: boolean;
	// HTML tag name
	tagName: TagName;
	// Self content type
	type: number;
	// Self-closing tag
	void: boolean;
}

export type TagConfigMap = Record<string, Partial<TagConfig>>;

// CALLBACKS

export type OnAfterParse<Props> = (content: Node, props: Props) => Node;

export type OnBeforeParse<Props> = (content: string, props: Props) => string;

export type Node = NonNullable<React.ReactNode>;

export type ChildrenNode = Node[] | string;

export type AttributeValue = boolean | number | object | string;

export type Attributes = Record<string, AttributeValue>;

// PARSER

export interface ParserProps {
	/** Allow all non-banned HTML attributes. */
	allowAttributes?: boolean;
	/** Allow all non-banned and non-blocked HTML elements to be rendered. */
	allowElements?: boolean;
	/** List of HTML tag names to allow and render. Defaults to the `ALLOWED_TAG_LIST` constant. */
	allow?: TagName[];
	/** List of HTML tag names to disallow and not render. Overrides allow list. */
	block?: TagName[];
	/** Disable the conversion of new lines to `<br />` elements. */
	disableLineBreaks?: boolean;
	/** Escape all HTML before parsing. */
	escapeHtml?: boolean;
	/** Strip all HTML while rendering. */
	noHtml?: boolean;
	/** Strip all HTML, except HTML generated by matchers or transformers, while rendering. */
	noHtmlExceptInternals?: boolean;
	/** The element to parse content in. Applies browser semantic rules. */
	tagName: TagName;
}

// INTERWEAVE

export interface MarkupProps extends ParserProps {
	/** Content that may contain HTML to safely render. */
	content?: string | null;
	/** Content to render when the `content` prop is empty. */
	emptyContent?: React.ReactNode;
	/** @ignore Pre-parsed content to render. */
	parsedContent?: React.ReactNode;
}

export interface InterweaveProps<TODO = {}> extends MarkupProps {
	/** List of transformers to apply to elements. */
	transformers?: Transformer<HTMLElement, TODO>[];
	/** List of matchers to apply to the content. */
	matchers?: Matcher<{}, TODO>[];
	/** Callback fired after parsing ends. Must return an array of React nodes. */
	onAfterParse?: OnAfterParse<TODO> | null;
	/** Callback fired beore parsing begins. Must return a string. */
	onBeforeParse?: OnAfterParse<TODO> | null;
}

export interface ElementProps {
	[prop: string]: any;
	attributes?: Attributes;
	className?: string;
	children?: React.ReactNode;
	selfClose?: boolean;
	tagName: string;
}
