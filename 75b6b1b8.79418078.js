(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(7),i=(n(0),n(89)),r=n(92),c=n(93),l={title:"Emoji extension",sidebar_label:"Emojis"},s={unversionedId:"exts/emoji",id:"exts/emoji",isDocsHomePage:!1,title:"Emoji extension",description:"Who loves emojis? Everyone loves emojis! This package provides support for rendering emoji, either",source:"@site/docs/exts/emoji.mdx",slug:"/exts/emoji",permalink:"/docs/exts/emoji",editUrl:"https://github.com/milesj/interweave/edit/master/website/docs/exts/emoji.mdx",version:"current",sidebar_label:"Emojis",sidebar:"docs",previous:{title:"Autolink extension",permalink:"/docs/exts/autolink"},next:{title:"Emoji picker",permalink:"/docs/exts/emoji-picker"}},b=[{value:"Requirements",id:"requirements",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Matching emojis",id:"matching-emojis",children:[{value:"Props",id:"props",children:[]},{value:"Result",id:"result",children:[]}]},{value:"Loading emoji data",id:"loading-emoji-data",children:[]},{value:"Converting emoticons",id:"converting-emoticons",children:[]},{value:"Converting shortcodes",id:"converting-shortcodes",children:[]},{value:"Displaying SVGs or PNGs",id:"displaying-svgs-or-pngs",children:[]},{value:"Displaying unicode characters",id:"displaying-unicode-characters",children:[]},{value:"Automatic enlargement",id:"automatic-enlargement",children:[]},{value:"Testing utilities",id:"testing-utilities",children:[]}],m={toc:b};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Who loves emojis? Everyone loves emojis! This package provides support for rendering emoji, either\ntheir unicode character, or with SVG/PNGs. It utilizes ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://emojibase.dev"}),"Emojibase")," for accurate and\nup-to-date data."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"<Interweave\n    content=\"This will convert emoji unicode characters (\ud83c\udf00), shortcodes (:cyclone:), and emoticons to SVGs! :)\"\n    matchers={[\n        new EmojiMatcher('emoji', {\n            convertEmoticon: true,\n            convertShortcode: true,\n        }),\n    ]}\n    emojiPath={getSvgPathForEmoji}\n/>\n")),Object(i.b)("h2",{id:"requirements"},"Requirements"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://emojibase.dev"}),"Emojibase"))),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)(r.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"yarn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add interweave interweave-emoji emojibase\n"))),Object(i.b)(c.a,{value:"npm",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install interweave interweave-emoji emojibase\n")))),Object(i.b)("h2",{id:"matching-emojis"},"Matching emojis"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"EmojiMatcher")," makes use of complex regex patterns provided by Emojibase to find and replace\nemoji unicode sequences with SVG/PNGS."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import Interweave from 'interweave';\nimport { EmojiMatcher } from 'interweave-emoji';\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"<Interweave content=\"Emoji unicode character: \ud83c\udf00\" matchers={[new EmojiMatcher('emoji')]} />\n")),Object(i.b)("h3",{id:"props"},"Props"),Object(i.b)("p",null,"The following props are available for ",Object(i.b)("inlineCode",{parentName:"p"},"<Emoji />")," components, all of which should be passed to an\n",Object(i.b)("inlineCode",{parentName:"p"},"<Interweave />")," instance."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"emojiSize")," (",Object(i.b)("inlineCode",{parentName:"li"},"string | number"),") - The width and height of emojis. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"1em"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"emojiLargeSize")," (",Object(i.b)("inlineCode",{parentName:"li"},"string | number"),") - The width and height of enlarged emojis. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"3em"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"emojiPath")," (",Object(i.b)("inlineCode",{parentName:"li"},"string | func"),") - A path to the ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#displaying-svgs-or-pngs"}),"PNG or SVG file"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enlargeEmoji")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Whether to enlarge the emoji or not. Automatically triggers via the\nmatcher but can be forced with this prop. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"renderUnicode")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Render the unicode character instead of an image. Defaults to\n",Object(i.b)("inlineCode",{parentName:"li"},"false"),".")),Object(i.b)("h3",{id:"result"},"Result"),Object(i.b)("p",null,"Both unicode literal characters and escape sequences are supported when matching. If a match is\nfound, an ",Object(i.b)("inlineCode",{parentName:"p"},"<Emoji />")," component will be rendered and passed some of the following props."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"emoticon")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - If applicable, an emoticon for the specific emoji character."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hexcode")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - The hexcode for the specific emoji character."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"shortcode")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - The shortcode for the specific emoji character."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"unicode")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - The unicode literal character.")),Object(i.b)("h2",{id:"loading-emoji-data"},"Loading emoji data"),Object(i.b)("p",null,"Before emoji can be rendered, emoji data must be loaded from a CDN. To do this, the ",Object(i.b)("inlineCode",{parentName:"p"},"useEmojiData()"),"\nhook can be used, which will fetch emoji data from Emojibase's CDN. The hook returns a tuple, with\nthe first item being an array of all emoji data, the second item being the source object (locale,\nversion, etc), and the third being the data manager instance."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import BaseInterweave, { InterweaveProps } from 'interweave';\nimport { useEmojiData } from 'interweave-emoji';\n\nexport default function Interweave(props: InterweaveProps) {\n    const [emojis, source, manager] = useEmojiData({ compact: false, shortcodes: ['emojibase'] });\n\n    return <BaseInterweave {...props} emojiSource={source} />;\n}\n")),Object(i.b)("p",null,"The hook supports the following optional options."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"compact")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Whether to load the compact or full dataset. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"locale")," (",Object(i.b)("inlineCode",{parentName:"li"},"Locale"),") - The localized data to fetch. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"en"),".\n",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://emojibase.dev/docs/datasets#supported-locales"}),"View supported locales"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"shortcodes")," (",Object(i.b)("inlineCode",{parentName:"li"},"string[]"),") - List of shortcode presets to load and join with emojis. Defaults to\n",Object(i.b)("inlineCode",{parentName:"li"},"emojibase"),". ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://emojibase.dev/docs/shortcodes"}),"View supported presets"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"throwErrors")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Throw an error when the fetch fails. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"version")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - The ",Object(i.b)("inlineCode",{parentName:"li"},"emojibase-data")," release version to fetch. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"latest"),".\n",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://emojibase.dev/docs/api#fetchfromcdn"}),"Read more"),".")),Object(i.b)("h2",{id:"converting-emoticons"},"Converting emoticons"),Object(i.b)("p",null,"Emoticons have been around longer than emoji, but emoji are much nicer to look at. Some emoji, not\nall, have an associated emoticon that can be converted to an emoji character. For example, ",Object(i.b)("inlineCode",{parentName:"p"},":)"),"\nwould convert to \ud83d\ude42."),Object(i.b)("p",null,"To enable conversion of an emoticon to a unicode literal character, pass the ",Object(i.b)("inlineCode",{parentName:"p"},"convertEmoticon"),"\noption to the matcher."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"<Interweave\n    content=\"Smiley faces :) ;p :>]\"\n    matchers={[new EmojiMatcher('emoji', { convertEmoticon: true })]}\n/>\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"A list of supported emoticons can be found in\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/milesj/emojibase/blob/master/packages/generator/src/resources/emoticons.ts"}),"Emojibase"),".")),Object(i.b)("h2",{id:"converting-shortcodes"},"Converting shortcodes"),Object(i.b)("p",null,"Shortcodes provide an easy non-unicode alternative for supporting emoji, and are represented by a\nword (or two) surrounded by two colons: ",Object(i.b)("inlineCode",{parentName:"p"},":boy:"),"."),Object(i.b)("p",null,"To enable conversion of a shortcode to a unicode literal character, pass the ",Object(i.b)("inlineCode",{parentName:"p"},"convertShortcode"),"\noption to the matcher constructor."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"<Interweave\n    content=\"Emoji shortcode: :cyclone:\"\n    matchers={[new EmojiMatcher('emoji', { convertShortcode: true })]}\n/>\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"A list of supported shortcodes can be found in\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/milesj/emojibase/blob/master/packages/generator/src/resources/shortcodes.ts"}),"Emojibase"),".")),Object(i.b)("h2",{id:"displaying-svgs-or-pngs"},"Displaying SVGs or PNGs"),Object(i.b)("p",null,"To begin, we must enable conversion of unicode characters to media (images, vector, etc), by\nenabling the ",Object(i.b)("inlineCode",{parentName:"p"},"convertUnicode")," option. Secondly, if you want to support shortcodes or emoticons,\nenable ",Object(i.b)("inlineCode",{parentName:"p"},"convertShortcode")," or ",Object(i.b)("inlineCode",{parentName:"p"},"convertEmoticon")," respectively."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"new EmojiMatcher('emoji', {\n    convertEmoticon: true,\n    convertShortcode: true,\n    convertUnicode: true,\n});\n")),Object(i.b)("p",null,"Now we need to provide an absolute path to the SVG/PNG file using the ",Object(i.b)("inlineCode",{parentName:"p"},"emojiPath")," prop. This path\nmust contain a ",Object(i.b)("inlineCode",{parentName:"p"},"{{hexcode}}")," token, which will be replaced by the hexadecimal codepoint (hexcode) of\nthe emoji."),Object(i.b)("p",null,"Or a function can be passed, which receives the hexcode as the 1st argument, and an object with\n",Object(i.b)("inlineCode",{parentName:"p"},"enlarged"),", ",Object(i.b)("inlineCode",{parentName:"p"},"smallSize"),", ",Object(i.b)("inlineCode",{parentName:"p"},"largeSize"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"size")," (either depending on enlarge state) properties."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"<Interweave\n  emojiPath=\"https://example.com/images/emoji/{{hexcode}}.png\"\n  matchers={[new EmojiMatcher('emoji')]}\n/>\n\n// OR\n\n<Interweave\n  emojiPath={(hexcode, { size }) => `https://example.com/images/emoji/${size}/${hexcode}.png`}\n  matchers={[new EmojiMatcher('emoji')]}\n/>\n")),Object(i.b)("p",null,"Both media formats make use of the ",Object(i.b)("inlineCode",{parentName:"p"},"img")," tag and will require an individual file, as sprites and\nicon fonts are not supported. The following resources can be used for downloading SVG/PNG icons."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"http://emojione.com/developers/"}),"JoyPixels")," (formerly EmojiOne)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/twitter/twemoji"}),"Twemoji"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: SVGs require CORS to work correctly, so files will need to be stored locally, or within a\nCDN under the same domain. Linking to remote SVGs will not work -- use PNGs instead.")),Object(i.b)("p",null,"Lastly, to control the width and height of the ",Object(i.b)("inlineCode",{parentName:"p"},"img"),", use the ",Object(i.b)("inlineCode",{parentName:"p"},"emojiSize")," prop, which accepts a\nnumber or string. If a number is provided, it'll be passed down to React, which defaults to ",Object(i.b)("inlineCode",{parentName:"p"},"px"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<Interweave emojiSize={32} emojiLargeSize={96} /> // 32px, 96px\n<Interweave emojiSize="1em" emojiLargeSize="3em" /> // 1em, 3em\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"I suggest using ",Object(i.b)("inlineCode",{parentName:"p"},"em")," scaling as the emoji will scale relative to the text around it.")),Object(i.b)("h2",{id:"displaying-unicode-characters"},"Displaying unicode characters"),Object(i.b)("p",null,"To display native unicode characters as is, pass the ",Object(i.b)("inlineCode",{parentName:"p"},"renderUnicode")," option to the matcher\nconstructor. This option will override the rendering of SVGs or PNGs, and works quite well alongside\nshortcode or emoticon conversion."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"new EmojiMatcher('emoji', { renderUnicode: true });\n")),Object(i.b)("h2",{id:"automatic-enlargement"},"Automatic enlargement"),Object(i.b)("p",null,"When an emoji is the only character within the content, it will automatically be enlarged. To\ndisable this functionality, set ",Object(i.b)("inlineCode",{parentName:"p"},"enlargeThreshold")," to 0. Inversely, if you want to increase the\nthreshold in which emojis are enlarged, increase the count."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"new EmojiMatcher('emoji', { enlargeThreshold: 3 });\n")),Object(i.b)("p",null,"For example, if ",Object(i.b)("inlineCode",{parentName:"p"},"enlargeThreshold")," is set to 3, and 3 emojis are found, all will be enlarged."),Object(i.b)("h2",{id:"testing-utilities"},"Testing utilities"),Object(i.b)("p",null,"Since emoji data must be fetched, this can be rather tedious to mock correctly and efficiently when\ntesting. To get around this, the ",Object(i.b)("inlineCode",{parentName:"p"},"mockEmojiData()")," function can be used, which should be called\nduring your testing framework's boostrap and ",Object(i.b)("em",{parentName:"p"},"not")," in a ",Object(i.b)("inlineCode",{parentName:"p"},"beforeEach")," event."),Object(i.b)("p",null,"By default this will only mock English (",Object(i.b)("inlineCode",{parentName:"p"},"en"),") data. If you need to support additional locales, call\nthe method again with the locale code, but do note that the actual data will still be in English (it\njust avoids a fetch)."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { mockEmojiData } from 'interweave-emoji/test';\n\nmockEmojiData();\nmockEmojiData('fr'); // For other locales\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Mocking requires the ",Object(i.b)("inlineCode",{parentName:"p"},"emojibase-test-utils")," dependency to be installed.")))}p.isMDXComponent=!0},87:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),b=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=b(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=b(n),d=a,u=m["".concat(r,".").concat(d)]||m[d]||p[d]||i;return n?o.a.createElement(u,c(c({ref:t},s),{},{components:n})):o.a.createElement(u,c({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";var a=n(0),o=n(91);t.a=function(){var e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},91:function(e,t,n){"use strict";var a=n(0),o=Object(a.createContext)(void 0);t.a=o},92:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(90),r=n(87),c=n(55),l=n.n(c),s=37,b=39;t.a=function(e){var t=e.lazy,n=e.block,c=e.defaultValue,m=e.values,p=e.groupId,d=e.className,u=Object(i.a)(),j=u.tabGroupChoices,h=u.setTabGroupChoices,O=Object(a.useState)(c),f=O[0],g=O[1],v=a.Children.toArray(e.children);if(null!=p){var N=j[p];null!=N&&N!==f&&m.some((function(e){return e.value===N}))&&g(N)}var w=function(e){g(e),null!=p&&h(p,e)},y=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n},d)},m.map((function(e){var t=e.value,n=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===t,className:Object(r.a)("tabs__item",l.a.tabItem,{"tabs__item--active":f===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case b:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case s:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(y,e.target,e)},onFocus:function(){return w(t)},onClick:function(){w(t)}},n)}))),t?Object(a.cloneElement)(v.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==f})}))))}},93:function(e,t,n){"use strict";var a=n(3),o=n(0),i=n.n(o);t.a=function(e){var t=e.children,n=e.hidden,o=e.className;return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:o}),t)}}}]);